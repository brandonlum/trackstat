{"version":3,"sources":["components/Login.js","components/Header.js","components/Nav.js","components/Profile.js","components/ScorecardForm.js","components/Scorecard.js","components/Scorecards.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","event","preventDefault","fetch","method","body","JSON","stringify","user","username","state","password","headers","Accept","Content-Type","then","response","json","resJson","setState","getUser","console","log","catch","error","handleChange","defineProperty","target","name","value","bind","assertThisInitialized","react_default","a","createElement","Container","Card","Form","onSubmit","Row","Col","className","Input","placeholder","type","onChange","Component","Header","xs","Button","color","href","components_Login","handleLogin","Nav","activeTab","toggle","tab","Fragment","Navbar","react_router_dom","classnames","active","to","Profile","CardTitle","CardBody","ScorecardForm","componentDidMount","scorecard","course_name","date_played","front_par","back_par","total_par","front_nine_score","back_nine_score","combined_score","userInfo","Number","toString","user_id","id","toggleForm","FormGroup","Label","for","Scorecard","formVisibile","_this$props","handleDelete","handleUpdate","components_ScorecardForm","key","outline","onClick","Scorecards","scorecards","map","components_Scorecard","App","userLogin","concat","Authorization","token","getScorecards","addScorecard","copyScorecards","toConsumableArray","unshift","formInputs","updateScorecard","deletedScorecard","filter","index","_this2","components_Header","components_Nav","react_router","path","render","components_Profile","assign","components_Scorecards","React","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40f662f6.chunk.js","sourcesContent":["import React, {Component} from 'react'\n// import {Redirect} from 'react-router-dom'\nimport {Container, Form, Input, Card, Row, Col} from 'reactstrap'\n\n\nclass Login extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            username: '',\n            password: ''\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        fetch(`/users/login`, {\n            method: \"POST\",\n            body: JSON.stringify(\n                {\n                    user: {\n                        username: this.state.username,\n                        password: this.state.password\n                    }\n                } \n            ),\n            headers: {\n              'Accept': 'application/json, text/plain, */*',\n              'Content-Type': 'application/json'\n            }\n          })\n          .then(response => response.json())\n          .then(resJson => {\n              this.setState({\n                  username: '',\n                  password: ''\n              })\n              this.props.getUser(resJson)\n              console.log('User logged in')\n          })\n          .catch(error => console.error(error))\n    }\n\n\n\n    render() {\n        // const {from} = this.props.location.state || '/';\n        // const {redirect} = this.state;\n        return (\n            <Container>\n                <Card>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Row>\n                            <Col className=\"p-0\">\n                                <Input\n                                    className=\"text-center\"\n                                    name=\"username\"\n                                    placeholder=\"Username\"\n                                    type=\"text\"\n                                    onChange={this.handleChange}\n                                />\n                            </Col>\n                            <Col className=\"p-0\">\n                                <Input\n                                    className=\"text-center\"\n                                    placeholder=\"Password\"\n                                    name=\"password\"\n                                    type=\"password\"\n                                    onChange={this.handleChange}\n                                />\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Input\n                                value=\"Login\"\n                                type=\"submit\"\n                            />\n                        </Row>\n                        \n                        \n                    </Form>\n                    <Row>\n                        <Input\n                            value=\"Register\"\n                            type=\"submit\"\n                        />\n                    </Row>\n                </Card>\n                {/* {redirect && (\n                    <Redirect to={from || `/user/{#this.state.id}`} />\n                )} */}\n            </Container>\n        );\n    }\n\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value})\n    }\n}\n\nexport default Login","import React, {Component} from 'react'\nimport {Container, Row, Col, Button} from 'reactstrap'\nimport Login from './Login.js'\n\nclass Header extends Component {\n    render () {\n        return (\n            <Container className=\"border-bottom\">\n                <Row>\n                    <Col xs=\"8\">\n                        <Button color=\"light\" href=\"/\">\n                            <h1>ScoreTracker</h1>Track all your scoring in one convenient location!\n                        </Button>\n                    </Col>\n                    <Col xs=\"4\">\n                        <Login\n                            handleLogin={this.props.handleLogin}\n                            getUser={this.props.getUser}\n                        />\n                    </Col>\n\n                </Row>\n            </Container>\n        )\n    }\n}\n\n\nexport default Header","import React, {Component} from 'react'\nimport {Navbar} from 'reactstrap'\nimport classnames from 'classnames'\nimport {HashRouter, Link} from 'react-router-dom'\n\n\nclass Nav extends Component {\n    state = {\n        activeTab: '1'\n    }\n\n    toggle = (tab) => {\n        if (this.state.activeTab !== tab) {\n            this.setState({\n                activeTab: tab\n            })\n        }\n    }\n\n    render () {\n        return (\n            <React.Fragment>\n                <Navbar className=\"container\">\n                    {/* <HashRouter basename='/'> */}\n                        <Link className={classnames({active: this.state.activeTab === '1'})} to='/profile'>\n                            Profile\n                        </Link>\n\n                        <Link className={classnames({active: this.state.activeTab === '2'})} to='/scorecards'>\n                            Scorecards\n                        </Link>\n\n                        <Link className={classnames({active: this.state.activeTab === '3'})} to='/scorecardform'>\n                            Scorecard Form\n                        </Link>\n                    {/* </HashRouter> */}\n                </Navbar>\n                {/* <TabContent activeTab={this.state.activeTab}>\n                    <TabPane tabId=\"1\">\n                        <Row>\n                            <Col sm=\"12\">\n\n                            </Col>\n                        </Row>\n                    </TabPane>\n                </TabContent> */}\n\n\n            </React.Fragment>\n        )\n    }\n}\n\n\nexport default Nav","import React, {Component} from 'react'\nimport {Card, CardTitle, CardBody} from 'reactstrap'\n\nclass Profile extends Component {\n    render () {\n        return (\n            <Card>\n                <CardTitle></CardTitle>\n                <CardBody>\n                    \n                </CardBody>\n\n            </Card>\n        )\n    }\n}\n\n\nexport default Profile","import React, {Component} from 'react'\nimport {Card, CardBody, CardTitle, Form, FormGroup, Label, Input} from 'reactstrap'\n\n\nclass ScorecardForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            course_name: '',\n            date_played: '',\n            front_par: 0,\n            back_par: 0,\n            total_par: 0,\n            front_nine_score: 0,\n            back_nine_score: 0,\n            combined_score: 0\n        \n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount = () => {\n        if (this.props.scorecard) {\n          this.setState({\n            course_name: this.props.scorecard.course_name,\n            date_played: this.props.scorecard.date_played,\n            front_par: this.props.scorecard.front_par,\n            back_par: this.props.scorecard.back_par,\n            total_par: this.props.scorecard.total_par,\n            front_nine_score: this.props.scorecard.front_nine_score,\n            back_nine_score: this.props.scorecard.back_nine_score,\n            combined_score: this.props.scorecard.combined_score\n          })\n        }\n      }\n    \n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value})\n\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(this.props.userInfo);\n        let total_par = (Number(this.state.front_par) + Number(this.state.back_par)).toString()\n        let combined_score = (Number(this.state.front_nine_score) + Number(this.state.back_nine_score)).toString()\n        const scorecard = {\n            course_name: this.state.course_name,\n            date_played: this.state.date_played,\n            front_par: this.state.front_par,\n            back_par: this.state.back_par,\n            total_par: total_par,\n            front_nine_score: this.state.front_nine_score,\n            back_nine_score: this.state.back_nine_score,\n            combined_score: combined_score,\n            user_id: this.props.userInfo.id\n        }\n\n        console.log('Scorecard', scorecard)\n        console.log('Props Scorecard', this.props.scorecard)\n        if (this.props.scorecard) {\n            scorecard.id = this.props.scorecard.id\n            this.props.toggleForm();\n        }\n        this.props.handleSubmit(\n            event,\n            scorecard\n        )\n    }\n\n\n    render () {\n        return (\n            <Card className=\"m-5\">\n                <CardBody>\n                    <CardTitle><h2>Scorecard Form</h2></CardTitle>\n                    <Form onSubmit={this.handleSubmit}>\n                        <FormGroup>\n                            <Label for=\"course_name\">Course Name</Label>\n                            <Input \n                                type=\"text\" name=\"course_name\"\n                                onChange={this.handleChange} \n                                placeholder={this.state.course_name}\n                                value={this.state.course_name}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"date_played\">Date Played</Label>\n                            <Input \n                                type=\"date\" \n                                name=\"date_played\" \n                                onChange={this.handleChange} placeholder={this.state.date_played}\n                                value={this.state.date_played}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"front_par\">Front Nine Par Rating</Label>\n                            <Input \n                                type=\"number\" \n                                name=\"front_par\" \n                                onChange={this.handleChange} \n                                placeholder={this.state.front_par}\n                                value={this.state.front_par}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"back_par\">Back Nine Par Rating</Label>\n                            <Input \n                                type=\"number\" \n                                name=\"back_par\" \n                                onChange={this.handleChange} \n                                placeholder={this.state.back_par}\n                                value={this.state.back_par}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"front_nine\">Front Nine Score</Label>\n                            <Input \n                                type=\"number\" name=\"front_nine_score\" \n                                onChange={this.handleChange} \n                                placeholder={this.state.front_nine_score}\n                                value={this.state.front_nine_score}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"back_nine\">Back Nine Score</Label>\n                            <Input \n                                type=\"number\" \n                                name=\"back_nine_score\" \n                                onChange={this.handleChange} \n                                placeholder={this.state.back_nine_score}\n                                value={this.state.back_nine_score}\n                                />\n                        </FormGroup>\n\n                        <Input type=\"submit\" value={this.props.scorecard ? \"Update Scorecard\":\"Submit new Scorecard!\"}/>\n                    </Form>\n\n                </CardBody>\n            </Card>\n        )\n    }\n}\n\nexport default ScorecardForm","import React, {Component} from 'react'\nimport {Card, CardBody, CardTitle, Button} from 'reactstrap'\nimport ScorecardForm from './ScorecardForm.js'\n\n\nclass Scorecard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            formVisibile: false\n        }\n    }\n\n    toggleForm = () => {\n        this.setState({formVisibile: !this.state.formVisibile})\n    }\n\n    render () {\n        const {scorecard, handleDelete, handleUpdate} = this.props\n        return (\n            <React.Fragment>\n                {\n                    this.state.formVisibile ? \n                    <ScorecardForm \n                        userInfo={this.props.userInfo}\n                        key={scorecard.id}\n                        scorecard={scorecard} \n                        handleSubmit={this.props.handleUpdate}\n                        toggleForm={this.toggleForm} \n                    />\n                    :\n                    <Card key={scorecard.id} className=\"m-5\">\n                        <CardTitle className=\"m-2 d-flex\">\n                            <h3>{scorecard.course_name}</h3>\n                            <Button className=\"mr-5 ml-5\" outline color=\"warning\" onClick={this.toggleForm}>Edit</Button>\n                            <Button className=\"mr-5 ml-5\" outline color=\"danger\" onClick={() => handleDelete(scorecard)}>Delete</Button>\n                        </CardTitle>\n                        <CardBody className=\"m-2 border\">\n                            <h5>Front Nine: {scorecard.front_nine_score}</h5>\n                            <p>Front Nine Par: {scorecard.front_par}</p>\n                            <h5>Back Nine: {scorecard.back_nine_score}</h5>\n                            <p>Back Nine Par: {scorecard.back_par}</p>\n\n                            <h5>Combined Score: {scorecard.combined_score}</h5>\n                            <p>Total Par: {scorecard.total_par}</p>\n                        </CardBody>\n\n                    </Card>\n                }\n            </React.Fragment>\n        )\n    }\n}\n\n\nexport default Scorecard","import React, {Component} from 'react'\nimport Scorecard from './Scorecard.js'\n\n\n\nclass Scorecards extends Component {\n\n    render () {\n        const {handleDelete, handleUpdate} = this.props\n        return (\n            <React.Fragment>\n                {\n                    this.props.scorecards.map(scorecard => \n                        <Scorecard \n                            userInfo={this.props.userInfo}\n                            key={scorecard.id}\n                            scorecard={scorecard}\n                            handleDelete={handleDelete}\n                            handleUpdate={handleUpdate}\n                        />\n                    )\n                }\n            </React.Fragment>\n        )\n    }\n}\n\n\nexport default Scorecards","import React from 'react';\nimport './App.css';\n// import {BASE_URL} from './constants.js'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport Header from './components/Header.js'\nimport Nav from './components/Nav.js'\nimport Profile from './components/Profile.js'\nimport Scorecards from './components/Scorecards.js'\nimport ScorecardForm from './components/ScorecardForm.js'\nimport {Container} from 'reactstrap'\n\nclass App extends React.Component {\n  state = {\n    scorecards: [],\n    userInfo: {}\n  }\n\n  getUser = (userLogin) => {\n    // event.preventDefault();\n    fetch(`/users/${userLogin.user.id}`, {\n      method: \"GET\",\n      headers: {\n        'Authorization': `Bearer ${userLogin.token}`\n      }\n    })\n    .then(response => response.json())\n    // .then(resJson => console.log(resJson))\n    .then(resJson => {\n      this.setState ({\n        userInfo : resJson\n      })\n      console.log('User: ', resJson.name, 'ID: ', resJson.id)\n    })\n    .catch(error => console.error(error))\n  }\n\n  // handleLogin = (event, userLogin) => {\n  //   event.preventDefault();\n  //   console.log('Handle Login', userLogin)\n  //   fetch(`/users/login`, {\n  //     method: \"POST\",\n  //     body: JSON.stringify(userLogin),\n  //     headers: {\n  //       'Accept': 'application/json, text/plain, */*',\n  //       'Content-Type': 'application/json'\n  //     }\n  //   })\n  //   .then(response => console.log(response))\n  //   .then(resJson => console.log('User Info', resJson))\n  //   // .then(resJson => {\n  //   //   this.setState({\n  //   //     userLogin: {\n  //   //       username: '',\n  //   //       password: '',\n  //   //       token: ''\n  //   //      }\n  //   //     // token: resJson.token\n  //   //   })\n  //   // })\n  //   .catch(error => console.error(error))\n  // }\n\n  getScorecards = () => {\n    fetch(`/users/${this.state.userInfo.id}/scorecards`)\n    .then(response => response.json())\n    // .then(resJson => console.log('Adding scorecard info', resJson))\n    .then(resJson => this.setState({scorecards: resJson}))\n    .catch(error => console.error(error))\n  }\n\n  addScorecard = (scorecard) => {\n    const copyScorecards = [...this.state.scorecards]\n    copyScorecards.unshift(scorecard)\n    this.setState({\n      scorecards: copyScorecards\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.id]: event.target.value\n    })\n  }\n\n  handleSubmit = (event, formInputs) => {\n    event.preventDefault();\n    console.log('Form Inputs: ', formInputs);\n    fetch(`/users/${this.state.userInfo.id}/scorecards`, {\n        method: \"POST\",\n        body: JSON.stringify(formInputs),\n        headers: {\n            'Accept':'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n    .then(response => response.json())\n    .then(resJson => {console.log(resJson)})\n    // .then(resJson => {\n    //     this.setState({\n    //       scorecards: [resJson, ...this.state.scorecards]\n    //     })\n    //     this.props.addScorecard(resJson)\n    // })\n    .catch(error => console.error(error))\n  }\n\n  handleUpdate = (event, formInputs) => {\n    event.preventDefault();\n    fetch(`/users/${this.state.userInfo.id}/scorecards/${formInputs.id}`, {\n        method: \"PUT\",\n        body: JSON.stringify({formInputs}),\n        headers: {\n            'Accept':'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n    .then(updateScorecard => {this.getScorecards()})\n    .catch(error => console.error(error))\n  }\n\n  handleDelete = (deletedScorecard) => {\n    fetch(`/scorecards/${deletedScorecard.id}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(json => {\n      this.setState(state => {\n        const scorecards = state.scorecards.filter((scorecard, index) => scorecard.id !== deletedScorecard.id)\n        return {\n          scorecards\n        }\n      })\n    })\n    .catch(error => console.error(error))\n  }\n\n\n  componentDidMount = () => {\n    this.getScorecards()\n  }\n\n  render () {\n    return (\n      <div className=\"dusty-grass-gradient\">\n        \n        <Header \n          handleLogin={this.handleLogin}\n          getUser={this.getUser}\n        />\n        <Router>\n          <Nav \n            userInfo={this.state.userInfo}\n          />\n          <Container>\n            <Route path=\"/profile\"\n              render = {(props) => \n              <Profile \n                {...props} \n                userInfo={this.state.userInfo}\n                handleUpdate={this.handleUpdate}\n              />} \n            />\n            <Route path=\"/scorecards\"\n              render = {(props) => \n                <Scorecards \n                  {...props}\n                  userInfo={this.state.userInfo}\n                  scorecards={this.state.scorecards}\n                  handleDelete={this.handleDelete}\n                  handleUpdate={this.handleUpdate}\n                />} \n            />\n\n            <Route path=\"/scorecardform\" \n              render = {(props) => \n              <ScorecardForm {...props} \n                userInfo={this.state.userInfo}\n                handleSubmit={this.handleSubmit}\n                handleChange={this.handleChange}\n              />} \n            />\n          </Container>\n          \n        </Router>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}